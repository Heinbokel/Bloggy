using System.Security.Cryptography;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;

namespace Bloggy.Services;

public static class PasswordService {

    public static string HashPassword(string unhashedPassword, byte[] salt) {
        // Use the PBKDF2 hashing algorithm to hash the password
        return Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: unhashedPassword,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 10000,
            numBytesRequested: 256 / 8));
    }

    public static byte[] GenerateSalt() {
        /*The unique salt for each password means that the attacker cannot use precomputed tables
        * or easily apply the same cracking technique across all passwords. They would need to perform a separate cracking attempt 
        * for each password, significantly increasing the time and computational resources required to crack even a single password.
        */

        // The size of the salt depends on the cryptographic algorithm being used, but 16 bytes (128 bits) is a common size for salts.
        byte[] salt = new byte[16];

        /* This line of code generates random bytes and fills the salt array with those bytes.
        * RandomNumberGenerator.Create() creates an instance of a cryptographic random number generator, which is suitable for generating secure random data.
        * .GetBytes(salt) then fills the salt array with random bytes generated by the random number generator. 
        * Example result: [200, 23, 45, 65, 34, 91, 12, 178, 55, 99, 76, 234, 88, 9, 201, 45]
        */
        RandomNumberGenerator.Create().GetBytes(salt);
        return salt;
    }

}